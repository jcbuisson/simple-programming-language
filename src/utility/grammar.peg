
ProgramEx
  = _ instructions:(LabeledInstruction _)*
  { return instructions.map(function(e) { return e[0]; }); }

LabeledInstruction
  = label:Label _ ":" _ instruction:InstructionWithLine
  { return { 'label': label, 'instruction': instruction }; }
  / instruction:InstructionWithLine
  { return { 'label': null, 'instruction': instruction }; }
 
InstructionWithLine
  = instruction:Instruction
  { instruction.line = location().start.line - 1; return instruction }
  
Instruction
  = "stop"
  { return { 'action': 'stop' }; }
  / "push" _ expr:Expression
  { return { 'action': 'push', 'expr': expr }; }
  / "pop" _ dest:MemoryLocation
  { return { 'action': 'pop', 'dest': dest }; }
  / "pop" 
  { return { 'action': 'pop', 'dest': null }; }
  / "compare" _ expr1:Expression _ "to" _ expr2:Expression
  { return { 'action': 'compare', 'expr1': expr1, 'expr2': expr2 }; }
  / "go" _ label:Label _ "if" _ cond:Condition
  { return { 'action': 'go', 'target': label, 'condition': cond }; }
  / "go" _ label:Label
  { return { 'action': 'go', 'target': label, 'condition': true }; }
  / "call" _ label:Label
  { return { 'action': 'call', 'target': label }; }
  / "return"
  { return { 'action': 'return' }; }
  / "pen_turn" _ expr:Expression
  { return { 'action': 'copy', 'expr': expr, 'dest': { 'type': 'output', 'index': 1, }, }; }
  / "pen_move" _ expr:Expression
  { return { 'action': 'copy', 'expr': expr, 'dest': { 'type': 'output', 'index': 2, }, }; }
  / "pen_draw" _ expr:Expression
  { return { 'action': 'copy', 'expr': expr, 'dest': { 'type': 'output', 'index': 3, }, }; }
  / "pen_write_char" _ expr:Expression
  { return { 'action': 'copy', 'expr': expr, 'dest': { 'type': 'output', 'index': 4, }, }; }
  / expr:Expression _ "->" _ dest:MemoryLocation
  { return { 'action': 'copy', 'expr': expr, 'dest': dest, }; }

Label
  = char0:[a-zA-Z_] chars:[a-zA-Z0-9_]*
  { return (char0 + chars.join("")); }

Condition
  = "equal" / "greater_or_equal" / "greater"  / "smaller_or_equal" / "smaller"
    
MemoryLocation
  = type:LocationType _ "[" _ index:Expression _ "]"
  { return { 'type': type, 'index': index, }; }
  / 'input'
  { return { 'type': 'input', 'index': 0, }; }
  / 'output'
  { return { 'type': 'output', 'index': 0, }; }
  / 'pen_turn'
  { return { 'type': 'output', 'index': 1, }; }
  / 'pen_move'
  { return { 'type': 'output', 'index': 2, }; }
  / 'pen_draw'
  { return { 'type': 'output', 'index': 3, }; }
  / 'pen_write_char'
  { return { 'type': 'output', 'index': 4, }; }

LocationType
  = "memory" { return 'memory'; }
  / "mem" { return 'memory'; }
  / "m" { return 'memory'; }
  / "stack" { return 'stack'; }
  / "s" { return 'stack'; }
  / "input" { return 'input'; }
  / "in" { return 'input'; }
  / "i" { return 'input'; }
  / "output" { return 'output'; }
  / "out" { return 'output'; }
  / "o" { return 'output'; }
  
Expression
  = t1:Factor _ op1:("+"/"-") _ t2:Factor _ op2:("+"/"-") _ t3:Factor
  { return { 'op': op1, 't1': t1, 't2': { 'op': op2, 't1': t2, 't2': t3 } }; }
  / t1:Term _ op:("+"/"-") _ t2:Term
  { return { 'op': op, 't1': t1, 't2': t2 }; }
  / Term
  
Term
  = t1:Factor _ op1:("*" / "/") _ t2:Factor _ op2:("*" / "/") _ t3:Factor
  { return { 'op': op1, 't1': t1, 't2': { 'op': op2, 't1': t2, 't2': t3 } }; }
  / t1:Factor _ op:("*" / "/") _ t2:Factor
  { return { 'op': op, 't1': t1, 't2': t2 }; }
  / Factor
  
Factor
  = "(" _ expr:Expression _ ")"
  { return expr; }
  / Integer
  / MemoryLocation

Integer "integer"
  = '-'?[0-9]+ { return parseInt(text(), 10); }

_ "whitespace"
  = ( whiteSpace / lineTerminator / enclosedComment / lineComment )*
     { return []; }

whiteSpace 
  = [\t\v\f \u00A0\uFEFF] 

lineTerminator 
  = [\n\r] 

enclosedComment 
  = "/*" (!"*/" anyCharacter)* "*/" 

lineComment 
  = "//" (!lineTerminator anyCharacter)* 

anyCharacter 
  = . 
