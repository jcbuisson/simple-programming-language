
ProgramEx
  = _ instructions:(LabeledInstruction _)*
  { return instructions.map(function(e) { return e[0]; }); }

LabeledInstruction
  = label:Label _ ":" _ instruction:Instruction
  { return { 'label': label, 'instruction': instruction, 'line': location().start.line - 1 }; }
  / instruction:Instruction
  { return { 'label': null, 'instruction': instruction, 'line': location().start.line - 1 }; }
  
Instruction
  = "stop"
  { return { 'action': 'stop' }; }
  / "compare" _ expr1:Expression _ "to" _ expr2:Expression
  { return { 'action': 'compare', 'expr1': expr1, 'expr2': expr2 }; }
  / "go" _ label:Label _ "if" _ cond:Condition
  { return { 'action': 'go', 'target': label, 'condition': cond }; }
  / "go" _ label:Label
  { return { 'action': 'go', 'target': label, 'condition': true }; }
   / expr:Expression _ "->" _ dest:MemoryLocation
  { return { 'action': 'copy', 'expr': expr, 'dest': dest, }; }

Label
  = char0:[a-zA-Z_] chars:[a-zA-Z0-9_]*
  { return (char0 + chars.join("")); }

Condition
  = "equal" / "greater_or_equal" / "greater"  / "smaller_or_equal" / "smaller"
    
MemoryLocation
  = type:LocationType _ "[" _ index:Integer _ "]"
  { return { 'type': type, 'index': index, }; }

LocationType
  = "data" { return 'data'; }
  / "d" { return 'data'; }
  / "stack" { return 'stack'; }
  / "s" { return 'stack'; }
  / "input" { return 'input'; }
  / "in" { return 'input'; }
  / "output" { return 'output'; }
  / "out" { return 'output'; }
  
Expression
  = t1:Factor _ op1:("+"/"-") _ t2:Factor _ op2:("+"/"-") _ t3:Factor
  { return { 'op': op1, 't1': t1, 't2': { 'op': op2, 't1': t2, 't2': t3 } }; }
  / t1:Term _ op:("+"/"-") _ t2:Term
  { return { 'op': op, 't1': t1, 't2': t2 }; }
  / Term
  
Term
  = t1:Factor _ op1:("*" / "/") _ t2:Factor _ op2:("*" / "/") _ t3:Factor
  { return { 'op': op1, 't1': t1, 't2': { 'op': op2, 't1': t2, 't2': t3 } }; }
  / t1:Factor _ op:("*" / "/") _ t2:Factor
  { return { 'op': op, 't1': t1, 't2': t2 }; }
  / Factor
  
Factor
  = "(" _ expr:Expression _ ")"
  { return expr; }
  / Integer
  / MemoryLocation

Integer "integer"
  = [0-9]+ { return parseInt(text(), 10); }

_ "whitespace"
  = ( whiteSpace / lineTerminator / enclosedComment / lineComment )*
     { return []; }

whiteSpace 
  = [\t\v\f \u00A0\uFEFF] 

lineTerminator 
  = [\n\r] 

enclosedComment 
  = "/*" (!"*/" anyCharacter)* "*/" 

lineComment 
  = "//" (!lineTerminator anyCharacter)* 

anyCharacter 
  = . 
